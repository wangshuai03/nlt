# 使用的用户和组
# user nobody;

# 指定工作衍生进程数，一般等于CPU总核数或者总核数的两倍
worker_processes            4;

# 指定错误日志存放的路径
error_log /opt/logs/nginx/error/log;

# 指定文件描述符路径
pid logs/nginx.pid;

# 指定最大文件打开数量
worker_rlimit_nofile 51200;

events {
	# 使用的网络I/O模型，Linux推荐使用epoll模型；FreeBSD推荐使用kqueue模型
	use epoll;

	# 允许的连接数
	worker_connections 51200;
}

http {
	include	mime.types;
	default_type application/octet-stream;
	underscores_in_headers on;


	# nginx缓冲设置
	server_names_hash_bucket_size 128;
	client_header_buffer_size 1k;
	large_client_header_buffers 8 16k;

	# 允许最大上传单个文件大小
	client_max_body_size 2m;

	# 先保存到本地，再传给用户
	client_body_buffer_size 128k;

    # 超时时间
    client_header_timeout 5;
    client_body_timeout 5;

    # proxy time
	proxy_connect_timeout 3;
	proxy_send_timeout 3;
	proxy_read_timeout 3;

	# 代理请求缓存区_这个缓存区会保存用户的头信息以供Nginx进行规则处理_一般只要能保存夏头信息即可
	proxy_buffer_size 16k;

	# 同上，告诉Nginx保存单个用户的几个Buffer最大用多大空间
	proxy_buffers 4 32k;

	# 如果系统很忙的时候可以申请更大的proxy_buffers，官方推荐*2
	proxy_busy_buffers_size	64k;

	proxy_set_header CLIENT_IP $remote_addr;

    # 关闭故障转移
    proxy_next_upstream off;

	log_format _main '$remote_addr "$time_iso8601" $request_method "$uri" "$args" "$request_body" $status $body_bytes_sent $request_time "$http_user_agent"';
	access_log /opt/logs/nginx/access/log _main;

	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;

	keepalive_timeout 65;
	#keepalive_timeout 0;

	#fastcgi配置
	fastcgi_connect_timeout 300;
	fastcgi_send_timeout 300;
	fastcgi_read_timeout 300;
	fastcgi_buffer_size 64k;
	fastcgi_buffers 4 64k;
	fastcgi_busy_buffers_size 128k;
	fastcgi_temp_file_write_size 128k;

	# gzip压缩设置
	gzip on;
	gzip_http_version 1.1;
	gzip_comp_level 6;
    gzip_proxied off;
	gzip_min_length 1k;
	gzip_buffers 4 16k;
	gzip_types text/plain text/xml text/javascript text/css application/json application/x-javascript application/xml application/xml+css;
	gzip_vary on;

	# nginx proxy 缓存设置
	# proxy_temp_path和proxy_cache_path指定的路径，必须在同一分区
	proxy_temp_path	/opt/nginx/proxy_temp_path;
	# 设置web缓存区名称为cache_one，内存缓存空间大小为500m，
	# 自动清除超过1天没有被访问的数据，硬盘缓存空间大小为30g
	proxy_cache_path /opt/nginx/proxy_cache_path levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;


	# nginx 防刷设置
	limit_req_zone $x_remote_addr zone=tudou_req_zone:200m rate=100r/s;

    lua_package_path '/opt/downloads/ngx_openresty-1.7.7.2/build/lua-resty-redis-0.20/lib/?.lua;;';

    upstream backend {
        server 127.0.0.1:9000;
        server 127.0.0.1:9001;
        server 127.0.0.1:9002;
        server 127.0.0.1:9003;
    }

    lua_code_cache on;

    server {
		listen 80;
		server_name 127.0.0.1;
		index index.html index.htm index.jsp;
		charset utf-8;

		log_subrequest on;

		set $x_remote_addr $http_x_real_ip;
		if ($x_remote_addr = "") {
			set $x_remote_addr $remote_addr;
		}

		log_format main '$x_remote_addr "$time_iso8601" $request_method "$uri" "$args" "$request_body" $status $body_bytes_sent $request_time "$http_user_agent"';
		access_log /opt/logs/nginx/access/log _main;

		location = /capture {
			internal;
			proxy_pass http://test1.api.3g.tudou.com/v4/play/detail?aid=85643&guid=9c553730ef5b6c8c542bfd31b5e25b69&_os_=Android&_product_=Tudou&ver=5.0&pid=36ee81f002cb577b&_e_=md5&t_=1438741556&_s_=8bd07d7da0d56209108da1f4f3186358;
		}

		location = /lua/capture {
			content_by_lua '
				local res = ngx.location.capture("/capture")
				if res.status == ngx.HTTP_OK then
				    ngx.header["Content-Type"] = "text/html; charset=UTF-8"
					ngx.say(res.body)
				end
			';
		}

		location = /multi1 {
			internal;
			proxy_pass http://test1.api.3g.tudou.com/v4/play/detail?aid=85643&guid=9c553730ef5b6c8c542bfd31b5e25b69&_os_=Android&_product_=Tudou&ver=5.0&pid=36ee81f002cb577b&_e_=md5&t_=1438741556&_s_=8bd07d7da0d56209108da1f4f3186358;
		}

		location = /multi2 {
			internal;
			proxy_pass http://test1.api.3g.tudou.com/v4/play/detail?aid=85643&guid=9c553730ef5b6c8c542bfd31b5e25b69&_os_=Android&_product_=Tudou&ver=5.0&pid=36ee81f002cb577b&_e_=md5&t_=1438741556&_s_=8bd07d7da0d56209108da1f4f3186358;
		}

		location = /multi3 {
			internal;
			proxy_pass http://test1.api.3g.tudou.com/v4/play/detail?aid=85643&guid=9c553730ef5b6c8c542bfd31b5e25b69&_os_=Android&_product_=Tudou&ver=5.0&pid=36ee81f002cb577b&_e_=md5&t_=1438741556&_s_=8bd07d7da0d56209108da1f4f3186358;
		}

		location = /lua/capture_multi {
			content_by_lua '
				local res1, res2, res3 = ngx.location.capture_multi({{"/multi1"}, {"/multi2"}, {"/multi3"}})
				if res1.status == ngx.HTTP_OK and res2.status == ngx.HTTP_OK and res3.status == ngx.HTTP_OK then
					ngx.header["Content-Type"] = "text/html; charset=UTF-8"
					ngx.say(res1.body)
				end
			';
		}

		location / {
			proxy_pass          http://backend;
			proxy_connect_timeout 3;
			proxy_send_timeout 3;
			proxy_read_timeout 3;
			proxy_redirect      default;
			proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header    X-Real-IP $x_remote_addr;
			proxy_set_header    Host $http_host;
			proxy_set_header    Range $http_range;
		}


    }

}
